use crate::event::Key;
use crate::windows::oot::Oot;

impl Key {
    pub(crate) fn to_raw(&self) -> Option<Oot<(u16, bool)>> {
        use Key::*;

        let ke = match *self {
            A => Oot::V1([(0x1E, false)]),
            B => Oot::V1([(0x30, false)]),
            C => Oot::V1([(0x2E, false)]),
            D => Oot::V1([(0x20, false)]),
            E => Oot::V1([(0x12, false)]),
            F => Oot::V1([(0x21, false)]),
            G => Oot::V1([(0x22, false)]),
            H => Oot::V1([(0x23, false)]),
            I => Oot::V1([(0x17, false)]),
            J => Oot::V1([(0x24, false)]),
            K => Oot::V1([(0x25, false)]),
            L => Oot::V1([(0x26, false)]),
            M => Oot::V1([(0x32, false)]),
            N => Oot::V1([(0x31, false)]),
            O => Oot::V1([(0x18, false)]),
            P => Oot::V1([(0x19, false)]),
            Q => Oot::V1([(0x10, false)]),
            R => Oot::V1([(0x13, false)]),
            S => Oot::V1([(0x1F, false)]),
            T => Oot::V1([(0x14, false)]),
            U => Oot::V1([(0x16, false)]),
            V => Oot::V1([(0x2F, false)]),
            W => Oot::V1([(0x11, false)]),
            X => Oot::V1([(0x2D, false)]),
            Y => Oot::V1([(0x15, false)]),
            Z => Oot::V1([(0x2C, false)]),
            N0 => Oot::V1([(0x0B, false)]),
            N1 => Oot::V1([(0x02, false)]),
            N2 => Oot::V1([(0x03, false)]),
            N3 => Oot::V1([(0x04, false)]),
            N4 => Oot::V1([(0x05, false)]),
            N5 => Oot::V1([(0x06, false)]),
            N6 => Oot::V1([(0x07, false)]),
            N7 => Oot::V1([(0x08, false)]),
            N8 => Oot::V1([(0x09, false)]),
            N9 => Oot::V1([(0x0A, false)]),
            Grave => Oot::V1([(0x29, false)]),
            Minus => Oot::V1([(0x0C, false)]),
            Equal => Oot::V1([(0x0D, false)]),
            Backslash => Oot::V1([(0x2B, false)]),
            Backspace => Oot::V1([(0x0E, false)]),
            Space => Oot::V1([(0x39, false)]),
            Tab => Oot::V1([(0x0F, false)]),
            CapsLock => Oot::V1([(0x3A, false)]),
            LeftShift => Oot::V1([(0x2A, false)]),
            LeftCtrl => Oot::V1([(0x1D, false)]),
            LeftMeta => Oot::V1([(0x5B, true)]),
            LeftAlt => Oot::V1([(0x38, false)]),
            RightShift => Oot::V1([(0x36, false)]),
            RightCtrl => Oot::V1([(0x1D, true)]),
            RightMeta => Oot::V1([(0x5C, true)]),
            RightAlt => Oot::V1([(0x38, true)]),
            Appselect => Oot::V1([(0x5D, true)]),
            Enter => Oot::V1([(0x1C, false)]),
            Esc => Oot::V1([(0x01, false)]),
            F1 => Oot::V1([(0x3B, false)]),
            F2 => Oot::V1([(0x3C, false)]),
            F3 => Oot::V1([(0x3D, false)]),
            F4 => Oot::V1([(0x3E, false)]),
            F5 => Oot::V1([(0x3F, false)]),
            F6 => Oot::V1([(0x40, false)]),
            F7 => Oot::V1([(0x41, false)]),
            F8 => Oot::V1([(0x42, false)]),
            F9 => Oot::V1([(0x43, false)]),
            F10 => Oot::V1([(0x44, false)]),
            F11 => Oot::V1([(0x57, false)]),
            F12 => Oot::V1([(0x58, false)]),
            SysRq => Oot::V2([(0x2A, true), (0x37, true)]),
            ScrollLock => Oot::V1([(0x46, false)]),
            // Pause not handled here, requires E1 and 3 bytes.
            // Not sure how to tell SendInput to accept that.
            LeftBrace => Oot::V1([(0x1A, false)]),
            Insert => Oot::V1([(0x52, true)]),
            Home => Oot::V1([(0x47, true)]),
            PageUp => Oot::V1([(0x49, true)]),
            Delete => Oot::V1([(0x53, true)]),
            End => Oot::V1([(0x4F, true)]),
            PageDown => Oot::V1([(0x51, true)]),
            Up => Oot::V1([(0x48, true)]),
            Left => Oot::V1([(0x4B, true)]),
            Down => Oot::V1([(0x50, true)]),
            Right => Oot::V1([(0x4D, true)]),
            NumLock => Oot::V1([(0x45, false)]),
            KpSlash => Oot::V1([(0x35, true)]),
            KpAsterisk => Oot::V1([(0x37, false)]),
            KpMinus => Oot::V1([(0x4A, false)]),
            KpPlus => Oot::V1([(0x4E, false)]),
            KpEnter => Oot::V1([(0x1C, true)]),
            KpDott => Oot::V1([(0x1C, false)]),
            Kp0 => Oot::V1([(0x52, false)]),
            Kp1 => Oot::V1([(0x4F, false)]),
            Kp2 => Oot::V1([(0x50, false)]),
            Kp3 => Oot::V1([(0x51, false)]),
            Kp4 => Oot::V1([(0x4B, false)]),
            Kp5 => Oot::V1([(0x4C, false)]),
            Kp6 => Oot::V1([(0x4D, false)]),
            Kp7 => Oot::V1([(0x47, false)]),
            Kp8 => Oot::V1([(0x48, false)]),
            Kp9 => Oot::V1([(0x49, false)]),
            RightBrace => Oot::V1([(0x1B, false)]),
            Semicolon => Oot::V1([(0x27, false)]),
            Apostrophe => Oot::V1([(0x28, false)]),
            Comma => Oot::V1([(0x33, false)]),
            Dot => Oot::V1([(0x34, false)]),
            Slash => Oot::V1([(0x35, false)]),
            _ => return None,
        };

        Some(ke)
    }
}
